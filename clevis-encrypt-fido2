#!/bin/bash

SUMMARY="Encrypts using a fido2 token that supports the hmac-secret extension"

if [ "$1" == "--summary" ]; then
    echo "$SUMMARY"
    exit 0
fi

if [ -t 0 ]; then
    exec >&2
    echo
    echo "Usage: clevis encrypt fido2 < PLAINTEXT > JWE"
    echo
    echo "$SUMMARY"
    echo
    echo "This command uses the following optional configuration properties:"
    echo
    echo '  type:     <string>    Algorithm to use for the credential (es256, rs256" or eddsa). (Default: es256)'
    echo
    echo '  cred_id:  <string>    A base64-encoded credential ID as generated by fido2-cred to use instead of generating a new one.'
    echo
    echo '  rp_id:    <string>    The reyling party id of the credential. (Default: "fido2.clevis")'
    echo
    echo '  up:       <boolean>   Whether or not to enable user presence. (Default: true)'
    echo
    echo '  uv:       <boolean>   Whether or not to enable user verification. (Default: false)'
    echo
    echo '  pin:      <boolean>   Whether or not to require a PIN. (Default: false)'
    echo
    echo '  device:   <string>    Option to hardcode a device to use.'
    echo
    echo '  timeout:  <string>    Number of seconds to wait for device to become available (Default: 30)'
    echo
    exit 2
fi

function create_credential () {
  local device
  local rp_id
  local type

  device="$1"
  rp_id="$2"
  type="$3"
  client_data="$(dd if=/dev/urandom bs=1 count=32 status=none | base64 -w0)"
  user_id="$(echo -n 'clevis' | base64 -w0)"
  cred_id="$(printf '%s\n%s\n%s\n%s\n' "${client_data}" "${rp_id}" 'clevis' "${user_id}" \
    | fido2-cred -M -h "${device}" "${type}" \
    | head -n5 | tail -n1)" >&2

  echo -n "${cred_id}"
}

function generate_hmac () {
  local device
  local rp_id
  local cred_id
  local hmac_salt

  device="$1"
  rp_id="$2"
  cred_id="$3"
  hmac_salt="$4"

  f2a_uv="-t uv=${uv}"
  if [ "${uv}" == "false" ] && ! fido2-token -I "${fido2_token}" | grep -qE "options:.* uv" ; then
    # Yubikey 5 NFC w/ libfido2 v1.14.0 does _not_ allow to explicitly specify "-t uv=true|false" below
    # (cf. https://github.com/Yubico/libfido2/issues/642#issuecomment-1303673367: "`uv` option [...] controls
    # device-native UV such as biometrics or on-authenticator PIN pad")
    f2a_uv=""
  fi

  client_hash="$(dd if=/dev/urandom bs=1 count=32 status=none | base64 -w0)"
  # shellcheck disable=SC2086
  hmac="$(printf '%s\n%s\n%s\n%s\n' "${client_hash}" "${rp_id}" "${cred_id}" "${hmac_salt}" | \
    fido2-assert -G -h ${f2a_uv} -t "up=${up}" -t "pin=${pin}" "${device}" | \
    head -n5 | tail -n1 | base64 -d | jose b64 enc -I -)" >&2

  echo -n "${hmac}"
}

cfg=''

if ! cfg="$(jose fmt -j- -Oo- <<< "$1" 2>/dev/null)"; then
    echo "${0##*/}: Error: Configuration is malformed!" >&2
    exit 1
fi

type="$(jose fmt -j- -Og type -Bo- <<< "$cfg")" || type='es256'
uv="$(jose fmt -j- -Og uv -Bo- <<< "$cfg")" || uv='false'
up="$(jose fmt -j- -Og up -Bo- <<< "$cfg")" || up='true'
pin="$(jose fmt -j- -Og pin -Bo- <<< "$cfg")" || pin='false'
timeout="$(jose fmt -j- -Og timeout -Bo- <<< "$cfg")" || timeout='30'
rp_id="$(jose fmt -j- -Og rp_id -Su- <<< "$cfg")" || rp_id='fido2.clevis'
fido2_token="$(jose fmt -j- -Og device -u- <<< "$cfg")" || fido2_token=''

show_msg=1
timeout1="${timeout}"
while [[ ! -c "${fido2_token}" ]]; do
  sleep 1
  if [[ -z "${fido2_token}" ]]; then
    fido2_tokens="$(fido2-token -L)"
    if [[ -z "${fido2_tokens}" && show_msg -eq 1 ]]; then
      echo "${0##*/}: Please insert your FIDO2 token" >&2
      show_msg=0
    fi
    fido2_token="$(echo "${fido2_tokens}" | head -n1 | cut -d':' -f1)"
    num_tokens="$(echo "${fido2_tokens}" | wc -l)"
    if ((num_tokens > 1)); then
      echo "${0##*/}: Warning: There are multiple tokens. Will use the first one (${fido2_token})." >&2
    fi
  else
    if [[ show_msg -eq 1 ]]; then
      echo "${0##*/}: Please insert your specified FIDO2 token ${fido2_token}" >&2
      show_msg=0
    fi
  fi
  # see 'sleep 1' above--we're keeping things simple here (cf. https://unix.stackexchange.com/a/156133/238272)
  timeout1=$((timeout1-1))
  if [[ ${timeout1} -lt 1 ]]; then
    if [[ -z "${fido2_token}" ]]; then
      echo "${0##*/}: Error: No FIDO2 token found within ${timeout} seconds." >&2
    else
      echo "${0##*/}: Error: specified FIDO2 token ${fido2_token} not found within ${timeout} seconds." >&2
    fi
    exit 1
  fi
done

cred_id="$(jose fmt -j- -Og cred_id -Su- <<< "$cfg")" || cred_id="$(create_credential "${fido2_token}" "${rp_id}" "${type}")"

# generate a random salt for each encrypted payload
hmac_salt="$(dd if=/dev/urandom bs=1 count=32 status=none | base64 -w0)"

# retrieve the hmac result which will be the password to use for key wrapping a CEK.
hmac="$(generate_hmac "${fido2_token}" "${rp_id}" "${cred_id}" "${hmac_salt}")"

if [ -z "${hmac}" ]; then
  echo "${0##*/}: Error: could not generate key." >&2
  exit 1
fi

jwk='{"kty":"oct", "alg":"A256GCM"}'
jwk="$(jose fmt -j "${jwk}" -q "${hmac}" -s k -Uo-)"

jwe='{"protected":{"enc":"A256GCM","clevis":{"pin":"fido2","fido2":{}}}}'
jwe="$(jose fmt -j "$jwe" -g protected -g clevis -g fido2 -q "${type}" -s type -UUUUo-)"
jwe="$(jose fmt -j "$jwe" -g protected -g clevis -g fido2 -q "${hmac_salt}" -s hmac_salt -UUUUo-)"
jwe="$(jose fmt -j "$jwe" -g protected -g clevis -g fido2 -q "${rp_id}" -s rp_id -UUUUo-)"
jwe="$(jose fmt -j "$jwe" -g protected -g clevis -g fido2 -q "${cred_id}" -s cred_id -UUUUo-)"
jwe="$(jose fmt -j "$jwe" -g protected -g clevis -g fido2 -q "${uv}" -s uv -UUUUo-)"
jwe="$(jose fmt -j "$jwe" -g protected -g clevis -g fido2 -q "${up}" -s up -UUUUo-)"
jwe="$(jose fmt -j "$jwe" -g protected -g clevis -g fido2 -q "${pin}" -s pin -UUUUo-)"
jwe="$(jose fmt -j "$jwe" -g protected -g clevis -g fido2 -q "${timeout}" -s timeout -UUUUo-)"
if [[ ! "${fido2_token}" =~ /dev/hid ]]; then
  # this is an explicitly specified, non-generic device name (tied to a specific fido2 key);
  # it makes sense to store and re-use this in clevis-decrypt-fido2
  # (see 'sss' pin type which can in turn include multiple 'fido2' pins)
  jwe="$(jose fmt -j "$jwe" -g protected -g clevis -g fido2 -q "${fido2_token}" -s device -UUUUo-)"
fi

exec jose jwe enc -i- -k- -I- -c < <(echo -n "$jwe$jwk"; /bin/cat)
